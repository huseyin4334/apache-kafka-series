spring.application.name=productservice
# random port
server.port=0

# Kafka configuration
spring.kafka.bootstrap-servers=localhost:9092,localhost:9093,localhost:9094
# String serializer will serialize the key string to byte array
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
# JsonSerializer will serialize the value object to byte array. Our object will be a JSON object.
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

# Configure Kafka Acknowledgement And Retries
# Acknowledgement is set to all, which means the leader will wait for all replicas to acknowledge the message.
# 1 -> When the leader receives the message, it will respond with an acknowledgement after it has written the message to its local log.
# all -> When the leader receives the message, it will respond with an acknowledgement only when all replicas have received the message.
# 0 -> When the leader receives the message, it won't respond with an acknowledgement.
spring.kafka.producer.acks=all
# Number of retries before the producer gives up and throws an exception.
# Default is 2147483647
spring.kafka.producer.retries=3
# The time to wait before retrying the send. Default is 100ms.
spring.kafka.producer.properties.retry.backoff.ms=1000
# The time to wait for the response of the Kafka broker.
# Default is 30 seconds.
spring.kafka.producer.properties.request.timeout.ms=10000
# The producer will wait for the batch to be full before sending the message. After that time, the producer will send the message directly.
spring.kafka.producer.properties.linger.ms=1
# Delivery timeout is the time the producer will wait for the response of the broker.
# Delivery timeout should equal or greater than linger.ms + request.timeout.ms.
# Because linger.ms is the max time that the producer will wait for send the message in a batch.
# And request.timeout.ms is the max time that the producer will wait for the response of the broker.
# This property limited the time that the producer will wait for the broker to respond (including retries).
spring.kafka.producer.properties.delivery.timeout.ms=30000

# Idempotent producer
# Idempotent producer is a producer that guarantees that the message will be sent only once.
# If the producer sends a message and the broker doesn't respond, the producer will retry sending the message. But the broker will ignore the message if it has already received it.
# Default is true
spring.kafka.producer.properties.enable.idempotence=true
# max.in.flight.requests.per.connection is the number of messages that the producer will send before waiting for the response of the broker.
# Default is 5. It uses for ordering messages.
spring.kafka.producer.properties.max.in.flight.requests.per.connection=5

# When we use the idempotent producer, kafka guarantees that the message will be sent only once and in order.
# The producer add a producer id (PID) and a sequence number to the message.
# The default when we set the idempotent producer, system will set the acks to all, retries to Integer.MAX_VALUE, max.in.flight.requests.per.connection to 5.
# Because this configuration is guarantee that the message will be sent only once and in order.
# Let's look at how;
# 1. The producer sends a message to the broker.
# 2. The broker receives the message and sends an acknowledgment to the producer. But the producer doesn't receive the acknowledgment.
# 3. The producer sends the message again to the broker. (Retries)
# 4. In the same time producer sends the second message to the broker. (max.in.flight.requests.per.connection)
# 5. The broker receives the second message and broker can understand that the message is second message and I didn't receive the first message successfully.
# 6. Second message waits in the broker until the broker receives the first message. (retries)
# 7. If the 1.message can write successfully in delivery.timeout.ms time and retry counts, the broker sends an acknowledgment to the producer. And continue to process the second message.
# 8. If the 1.message can't write successfully in delivery.timeout.ms time and retry counts, the broker doesn't will send an error to the producer. And producer continue with the other messages.

